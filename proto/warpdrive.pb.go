// Code generated by protoc-gen-go.
// source: proto/warpdrive.proto
// DO NOT EDIT!

/*
Package warpdrive is a generated protocol buffer package.

It is generated from these files:
	proto/warpdrive.proto

It has these top-level messages:
	Empty
	App
	Release
	Upgrade
*/
package warpdrive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Platform int32

const (
	Platform_IOS     Platform = 0
	Platform_ANDROID Platform = 1
)

var Platform_name = map[int32]string{
	0: "IOS",
	1: "ANDROID",
}
var Platform_value = map[string]int32{
	"IOS":     0,
	"ANDROID": 1,
}

func (x Platform) String() string {
	return proto.EnumName(Platform_name, int32(x))
}
func (Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type App struct {
	// @inject_tag: storm:"id"
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" storm:"id"`
	// @inject_tag: storm:"unique"
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty" storm:"unique"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *App) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Release struct {
	// @inject_tag: storm:"id"
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty" storm:"id"`
	AppId uint64 `protobuf:"varint,2,opt,name=appId" json:"appId,omitempty"`
	// this is just for label. it's not unique
	// becuase you might want to rollback
	Version  string   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty" `
	Notes    string   `protobuf:"bytes,4,opt,name=notes" json:"notes,omitempty"`
	Platform Platform `protobuf:"varint,5,opt,name=platform,enum=warpdrive.Platform" json:"platform,omitempty"`
	// this is list of releases that can safely upgrade to this
	// version
	UpgradableReleases []uint64 `protobuf:"varint,6,rep,packed,name=upgradableReleases" json:"upgradableReleases,omitempty" `
	// this is used as what kind of release is. As an example `beta`
	RolloutAt string `protobuf:"bytes,7,opt,name=rolloutAt" json:"rolloutAt,omitempty" `
	// this is the hash value of bundle package
	Bundle string `protobuf:"bytes,8,opt,name=bundle" json:"bundle,omitempty" `
	// if the lock value is true, it means that this release can not be ultered or modified.
	// this is used to make sure the production doesn't download the unlock one.
	Lock      bool   `protobuf:"varint,9,opt,name=lock" json:"lock,omitempty" `
	CreatedAt string `protobuf:"bytes,10,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt string `protobuf:"bytes,11,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Release) Reset()                    { *m = Release{} }
func (m *Release) String() string            { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()               {}
func (*Release) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Release) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Release) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *Release) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Release) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Release) GetPlatform() Platform {
	if m != nil {
		return m.Platform
	}
	return Platform_IOS
}

func (m *Release) GetUpgradableReleases() []uint64 {
	if m != nil {
		return m.UpgradableReleases
	}
	return nil
}

func (m *Release) GetRolloutAt() string {
	if m != nil {
		return m.RolloutAt
	}
	return ""
}

func (m *Release) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

func (m *Release) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

func (m *Release) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Release) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type Upgrade struct {
	ReleaseId uint64 `protobuf:"varint,1,opt,name=releaseId" json:"releaseId,omitempty"`
	// so if shouldBeLock is `true`, then we only retern locked releases.
	// if it's `false`, we are returning locked and unlocked releases
	ShouldBeLock bool `protobuf:"varint,2,opt,name=shouldBeLock" json:"shouldBeLock,omitempty" `
}

func (m *Upgrade) Reset()                    { *m = Upgrade{} }
func (m *Upgrade) String() string            { return proto.CompactTextString(m) }
func (*Upgrade) ProtoMessage()               {}
func (*Upgrade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Upgrade) GetReleaseId() uint64 {
	if m != nil {
		return m.ReleaseId
	}
	return 0
}

func (m *Upgrade) GetShouldBeLock() bool {
	if m != nil {
		return m.ShouldBeLock
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "warpdrive.Empty")
	proto.RegisterType((*App)(nil), "warpdrive.App")
	proto.RegisterType((*Release)(nil), "warpdrive.Release")
	proto.RegisterType((*Upgrade)(nil), "warpdrive.Upgrade")
	proto.RegisterEnum("warpdrive.Platform", Platform_name, Platform_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Warpdrive service

type WarpdriveClient interface {
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	GetAllApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Warpdrive_GetAllAppsClient, error)
	RemoveApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error)
	CreateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error)
	GetRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error)
	UpdateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error)
}

type warpdriveClient struct {
	cc *grpc.ClientConn
}

func NewWarpdriveClient(cc *grpc.ClientConn) WarpdriveClient {
	return &warpdriveClient{cc}
}

func (c *warpdriveClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/warpdrive.Warpdrive/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warpdriveClient) GetAllApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Warpdrive_GetAllAppsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Warpdrive_serviceDesc.Streams[0], c.cc, "/warpdrive.Warpdrive/GetAllApps", opts...)
	if err != nil {
		return nil, err
	}
	x := &warpdriveGetAllAppsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Warpdrive_GetAllAppsClient interface {
	Recv() (*App, error)
	grpc.ClientStream
}

type warpdriveGetAllAppsClient struct {
	grpc.ClientStream
}

func (x *warpdriveGetAllAppsClient) Recv() (*App, error) {
	m := new(App)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *warpdriveClient) RemoveApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/warpdrive.Warpdrive/RemoveApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warpdriveClient) CreateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := grpc.Invoke(ctx, "/warpdrive.Warpdrive/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warpdriveClient) GetRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := grpc.Invoke(ctx, "/warpdrive.Warpdrive/GetRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warpdriveClient) UpdateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := grpc.Invoke(ctx, "/warpdrive.Warpdrive/UpdateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Warpdrive service

type WarpdriveServer interface {
	CreateApp(context.Context, *App) (*App, error)
	GetAllApps(*Empty, Warpdrive_GetAllAppsServer) error
	RemoveApp(context.Context, *App) (*Empty, error)
	CreateRelease(context.Context, *Release) (*Release, error)
	GetRelease(context.Context, *Release) (*Release, error)
	UpdateRelease(context.Context, *Release) (*Release, error)
}

func RegisterWarpdriveServer(s *grpc.Server, srv WarpdriveServer) {
	s.RegisterService(&_Warpdrive_serviceDesc, srv)
}

func _Warpdrive_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarpdriveServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Warpdrive/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarpdriveServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warpdrive_GetAllApps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WarpdriveServer).GetAllApps(m, &warpdriveGetAllAppsServer{stream})
}

type Warpdrive_GetAllAppsServer interface {
	Send(*App) error
	grpc.ServerStream
}

type warpdriveGetAllAppsServer struct {
	grpc.ServerStream
}

func (x *warpdriveGetAllAppsServer) Send(m *App) error {
	return x.ServerStream.SendMsg(m)
}

func _Warpdrive_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarpdriveServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Warpdrive/RemoveApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarpdriveServer).RemoveApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warpdrive_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarpdriveServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Warpdrive/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarpdriveServer).CreateRelease(ctx, req.(*Release))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warpdrive_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarpdriveServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Warpdrive/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarpdriveServer).GetRelease(ctx, req.(*Release))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warpdrive_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarpdriveServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Warpdrive/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarpdriveServer).UpdateRelease(ctx, req.(*Release))
	}
	return interceptor(ctx, in, info, handler)
}

var _Warpdrive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "warpdrive.Warpdrive",
	HandlerType: (*WarpdriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Warpdrive_CreateApp_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _Warpdrive_RemoveApp_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _Warpdrive_CreateRelease_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _Warpdrive_GetRelease_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _Warpdrive_UpdateRelease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllApps",
			Handler:       _Warpdrive_GetAllApps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/warpdrive.proto",
}

// Client API for Query service

type QueryClient interface {
	GetUpgrade(ctx context.Context, in *Upgrade, opts ...grpc.CallOption) (*Release, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetUpgrade(ctx context.Context, in *Upgrade, opts ...grpc.CallOption) (*Release, error) {
	out := new(Release)
	err := grpc.Invoke(ctx, "/warpdrive.Query/GetUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	GetUpgrade(context.Context, *Upgrade) (*Release, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Upgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warpdrive.Query/GetUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUpgrade(ctx, req.(*Upgrade))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "warpdrive.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUpgrade",
			Handler:    _Query_GetUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/warpdrive.proto",
}

func init() { proto.RegisterFile("proto/warpdrive.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x27, 0x69, 0xda, 0x34, 0x6f, 0x6c, 0xaa, 0x1e, 0x7f, 0x64, 0x4d, 0x1c, 0xa2, 0x9c, 0x02,
	0x88, 0x6e, 0x2a, 0x48, 0x3b, 0x71, 0x08, 0x0c, 0xa1, 0x0a, 0xc4, 0xc0, 0x68, 0xe2, 0xec, 0xce,
	0x06, 0x2a, 0xdc, 0xda, 0x72, 0x9c, 0xa2, 0x7d, 0x3c, 0x2e, 0x7c, 0x2e, 0x94, 0x97, 0xa4, 0x2d,
	0x5b, 0x2e, 0xbb, 0xf9, 0xf7, 0xe7, 0x3d, 0xff, 0xf2, 0x9e, 0x03, 0x8f, 0xac, 0x33, 0xde, 0x9c,
	0xfc, 0x16, 0xce, 0x4a, 0xb7, 0xdc, 0xa8, 0x29, 0x61, 0x4c, 0xb6, 0x44, 0x16, 0xc3, 0xf0, 0xdd,
	0xca, 0xfa, 0xeb, 0xec, 0x29, 0x0c, 0x0a, 0x6b, 0xf1, 0x08, 0xc2, 0xa5, 0x64, 0x41, 0x1a, 0xe4,
	0x11, 0x0f, 0x97, 0x12, 0x11, 0xa2, 0xb5, 0x58, 0x29, 0x16, 0xa6, 0x41, 0x9e, 0x70, 0x3a, 0x67,
	0x7f, 0x43, 0x88, 0xb9, 0xd2, 0x4a, 0x94, 0xea, 0x96, 0xff, 0x21, 0x0c, 0x85, 0xb5, 0x73, 0x49,
	0x05, 0x11, 0x6f, 0x00, 0x32, 0x88, 0x37, 0xca, 0x95, 0x4b, 0xb3, 0x66, 0x03, 0x6a, 0xd4, 0xc1,
	0xda, 0xbf, 0x36, 0x5e, 0x95, 0x2c, 0x22, 0xbe, 0x01, 0x78, 0x02, 0x63, 0xab, 0x85, 0xff, 0x6e,
	0xdc, 0x8a, 0x0d, 0xd3, 0x20, 0x3f, 0x9a, 0x3d, 0x98, 0xee, 0x3e, 0xe2, 0x73, 0x2b, 0xf1, 0xad,
	0x09, 0xa7, 0x80, 0x95, 0xfd, 0xe1, 0x84, 0x14, 0x0b, 0xad, 0xda, 0x6c, 0x25, 0x1b, 0xa5, 0x83,
	0x3c, 0xe2, 0x3d, 0x0a, 0x3e, 0x81, 0xc4, 0x19, 0xad, 0x4d, 0xe5, 0x0b, 0xcf, 0x62, 0xba, 0x7a,
	0x47, 0xe0, 0x63, 0x18, 0x2d, 0xaa, 0xb5, 0xd4, 0x8a, 0x8d, 0x49, 0x6a, 0x51, 0x3d, 0x0c, 0x6d,
	0xae, 0x7e, 0xb1, 0x24, 0x0d, 0xf2, 0x31, 0xa7, 0x73, 0xdd, 0xe9, 0xca, 0x29, 0xe1, 0x95, 0x2c,
	0x3c, 0x83, 0xa6, 0xd3, 0x96, 0xa8, 0xd5, 0xca, 0xca, 0x56, 0x3d, 0x68, 0xd4, 0x2d, 0x91, 0x7d,
	0x80, 0xf8, 0x92, 0xb2, 0x29, 0x0a, 0xd4, 0x84, 0x9b, 0x77, 0xe3, 0xdc, 0x11, 0x98, 0xc1, 0xfd,
	0xf2, 0xa7, 0xa9, 0xb4, 0x7c, 0xa3, 0x3e, 0xd6, 0x01, 0x42, 0x0a, 0xf0, 0x1f, 0xf7, 0x2c, 0x85,
	0x71, 0x37, 0x18, 0x8c, 0x61, 0x30, 0xbf, 0xf8, 0x3a, 0xb9, 0x87, 0x07, 0x10, 0x17, 0x9f, 0xce,
	0xf9, 0xc5, 0xfc, 0x7c, 0x12, 0xcc, 0xfe, 0x84, 0x90, 0x7c, 0xeb, 0xa6, 0x88, 0xcf, 0x21, 0x79,
	0x4b, 0x39, 0x69, 0xed, 0x7b, 0xe3, 0x2d, 0xac, 0x3d, 0xbe, 0x81, 0xf1, 0x14, 0xe0, 0xbd, 0xf2,
	0x85, 0xd6, 0x85, 0xb5, 0x25, 0x4e, 0xf6, 0x54, 0x7a, 0x3d, 0x37, 0xfd, 0xa7, 0x01, 0xbe, 0x80,
	0x84, 0xab, 0x95, 0xd9, 0xf4, 0xb6, 0xbf, 0xd5, 0x00, 0xcf, 0xe0, 0xb0, 0x49, 0xd3, 0x3d, 0x2c,
	0xdc, 0xb3, 0xb4, 0xdc, 0x71, 0x0f, 0x87, 0xaf, 0x28, 0xd9, 0x5d, 0xab, 0xce, 0xe0, 0xf0, 0x92,
	0xd6, 0x70, 0xc7, 0xc2, 0xd9, 0x6b, 0x18, 0x7e, 0xa9, 0x94, 0xbb, 0x6e, 0xef, 0xed, 0xd6, 0xb7,
	0x6f, 0x6d, 0xb9, 0xbe, 0xf2, 0xc5, 0x88, 0x7e, 0xc0, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x5e, 0xad, 0x93, 0x18, 0x99, 0x03, 0x00, 0x00,
}

syntax = "proto3";

package warpdrive;

// only being used by cli and/or UI if available
service Command {
  rpc CreateRelease(Release) returns (Release){}
  // if Release.Id is provided, then only the matched one returns.
  // if Release.App is provided, then it returns all the releases for that app
  rpc GetRelease(Release) returns (stream Release){}
  // once the release.lock set to true, Release can not be updated anymore, 
  // only `nextReleaseId` can be changed under the following condition:
  // nextReleaseId must not set or `lock` has to be false
  rpc UpdateRelease(Release) returns (Release){}
  // UplaodRelease won't work unless ReleaseId exists
  rpc UploadRelease(stream Chunck) returns (Empty){}
}

// only being used by mobile devices
service Query {
  // the folowing four fields must be presented in Release object 
  // `Release.id`, `Release.app`, `Release.platform`, `Release.rolloutAt`
  // when client need to know the next Release
  rpc GetUpgrade(Release) returns (Release){}
  rpc DownloadRelease(Release) returns (stream Chunck){}
}

message Empty {}

enum Platform {
  IOS = 0;
  ANDROID = 1;
}

// Release can be duplicate for different rollout.
// for example, bundle can be released under beta for App1 and then
// it needs to be pushed again to be rollout as production. behind the scene both records are
// using the same bundle binary but they are tragetign two sets of people.
message Release {
  // @inject_tag: storm:"id"
  uint64 id = 1;
  // @inject_tag: storm:"index"
  string app = 2;
  // this is just for label. it's not unique
  // becuase you might want to rollback
  // @inject_tag: storm:"index"
  string version = 3;
  string notes = 4;
  Platform platform = 5;
  // this is list of releases that can safely upgrade to this 
  // version.
  uint64 nextReleaseId = 6;
  // this is used as what kind of release is. As an example `beta`
  string rolloutAt = 7;
  // this is the hash value of bundle package
  // @inject_tag: storm:"index"
  string bundle = 8;
  // if the lock value is true, it means that this release can not be ultered or modified.
  // this is used to make sure the production doesn't download the unlock one.
  bool lock = 9;
  string createdAt = 10;
  string updatedAt = 11;
}

message Chunck {
  message Header {
    uint64 releaseId = 1;
    int64 total = 2;
  }

  message Body {
    bytes data = 1;
  }

  oneof value {
    Header header = 1;
    Body body = 2;
  }
}
